{
  "description": "BareMetalHost is the Schema for the baremetalhosts API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": "string",
          "format": "date-time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": "string",
          "format": "date-time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": "array",
          "items": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                "type": "string"
              },
              "fieldsType": {
                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                "type": "string"
              },
              "fieldsV1": {
                "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                "type": "object"
              },
              "manager": {
                "description": "Manager is an identifier of the workflow managing these fields.",
                "type": "string"
              },
              "operation": {
                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                "type": "string"
              },
              "subresource": {
                "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                "type": "string"
              },
              "time": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "type": "object",
            "required": [
              "apiVersion",
              "kind",
              "name",
              "uid"
            ],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string"
              },
              "blockOwnerDeletion": {
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                "type": "boolean"
              },
              "controller": {
                "description": "If true, this reference points to the managing controller.",
                "type": "boolean"
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "name": {
                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": "string"
              },
              "uid": {
                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": "string"
              }
            },
            "x-kubernetes-map-type": "atomic"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "BareMetalHostSpec defines the desired state of BareMetalHost",
      "type": "object",
      "required": [
        "online"
      ],
      "properties": {
        "automatedCleaningMode": {
          "description": "When set to disabled, automated cleaning will be avoided during provisioning and deprovisioning.",
          "type": "string",
          "enum": [
            "metadata",
            "disabled"
          ]
        },
        "bmc": {
          "description": "How do we connect to the BMC?",
          "type": "object",
          "required": [
            "address",
            "credentialsName"
          ],
          "properties": {
            "address": {
              "description": "Address holds the URL for accessing the controller on the network.",
              "type": "string"
            },
            "credentialsName": {
              "description": "The name of the secret containing the BMC credentials (requires keys \"username\" and \"password\").",
              "type": "string"
            },
            "disableCertificateVerification": {
              "description": "DisableCertificateVerification disables verification of server certificates when using HTTPS to connect to the BMC. This is required when the server certificate is self-signed, but is insecure because it allows a man-in-the-middle to intercept the connection.",
              "type": "boolean"
            }
          }
        },
        "bootMACAddress": {
          "description": "Which MAC address will PXE boot? This is optional for some types, but required for libvirt VMs driven by vbmc.",
          "type": "string",
          "pattern": "[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}"
        },
        "bootMode": {
          "description": "Select the method of initializing the hardware during boot. Defaults to UEFI.",
          "type": "string",
          "enum": [
            "UEFI",
            "UEFISecureBoot",
            "legacy"
          ]
        },
        "consumerRef": {
          "description": "ConsumerRef can be used to store information about something that is using a host. When it is not empty, the host is considered \"in use\".",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          }
        },
        "customDeploy": {
          "description": "A custom deploy procedure.",
          "type": "object",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "description": "Custom deploy method name. This name is specific to the deploy ramdisk used. If you don't have a custom deploy ramdisk, you shouldn't use CustomDeploy.",
              "type": "string"
            }
          }
        },
        "description": {
          "description": "Description is a human-entered text used to help identify the host",
          "type": "string"
        },
        "externallyProvisioned": {
          "description": "ExternallyProvisioned means something else is managing the image running on the host and the operator should only manage the power status and hardware inventory inspection. If the Image field is filled in, this field is ignored.",
          "type": "boolean"
        },
        "firmware": {
          "description": "BIOS configuration for bare metal server",
          "type": "object",
          "properties": {
            "simultaneousMultithreadingEnabled": {
              "description": "Allows a single physical processor core to appear as several logical processors. This supports following options: true, false.",
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            },
            "sriovEnabled": {
              "description": "SR-IOV support enables a hypervisor to create virtual instances of a PCI-express device, potentially increasing performance. This supports following options: true, false.",
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            },
            "virtualizationEnabled": {
              "description": "Supports the virtualization of platform hardware. This supports following options: true, false.",
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            }
          }
        },
        "hardwareProfile": {
          "description": "What is the name of the hardware profile for this host? It should only be necessary to set this when inspection cannot automatically determine the profile.",
          "type": "string"
        },
        "image": {
          "description": "Image holds the details of the image to be provisioned.",
          "type": "object",
          "required": [
            "url"
          ],
          "properties": {
            "checksum": {
              "description": "Checksum is the checksum for the image.",
              "type": "string"
            },
            "checksumType": {
              "description": "ChecksumType is the checksum algorithm for the image. e.g md5, sha256, sha512",
              "type": "string",
              "enum": [
                "md5",
                "sha256",
                "sha512"
              ]
            },
            "format": {
              "description": "DiskFormat contains the format of the image (raw, qcow2, ...). Needs to be set to raw for raw images streaming. Note live-iso means an iso referenced by the url will be live-booted and not deployed to disk, and in this case the checksum options are not required and if specified will be ignored.",
              "type": "string",
              "enum": [
                "raw",
                "qcow2",
                "vdi",
                "vmdk",
                "live-iso"
              ]
            },
            "url": {
              "description": "URL is a location of an image to deploy.",
              "type": "string"
            }
          }
        },
        "metaData": {
          "description": "MetaData holds the reference to the Secret containing host metadata (e.g. meta_data.json) which is passed to the Config Drive.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          }
        },
        "networkData": {
          "description": "NetworkData holds the reference to the Secret containing network configuration (e.g content of network_data.json) which is passed to the Config Drive.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          }
        },
        "online": {
          "description": "Should the server be online?",
          "type": "boolean"
        },
        "preprovisioningNetworkDataName": {
          "description": "PreprovisioningNetworkDataName is the name of the Secret in the local namespace containing network configuration (e.g content of network_data.json) which is passed to the preprovisioning image, and to the Config Drive if not overridden by specifying NetworkData.",
          "type": "string"
        },
        "raid": {
          "description": "RAID configuration for bare metal server",
          "type": "object",
          "properties": {
            "hardwareRAIDVolumes": {
              "description": "The list of logical disks for hardware RAID, if rootDeviceHints isn't used, first volume is root volume. You can set the value of this field to `[]` to clear all the hardware RAID configurations."
            },
            "softwareRAIDVolumes": {
              "description": "The list of logical disks for software RAID, if rootDeviceHints isn't used, first volume is root volume. If HardwareRAIDVolumes is set this item will be invalid. The number of created Software RAID devices must be 1 or 2. If there is only one Software RAID device, it has to be a RAID-1. If there are two, the first one has to be a RAID-1, while the RAID level for the second one can be 0, 1, or 1+0. As the first RAID device will be the deployment device, enforcing a RAID-1 reduces the risk of ending up with a non-booting node in case of a disk failure. Software RAID will always be deleted.",
              "maxItems": 2
            }
          }
        },
        "rootDeviceHints": {
          "description": "Provide guidance about how to choose the device for the image being provisioned.",
          "type": "object",
          "properties": {
            "deviceName": {
              "description": "A Linux device name like \"/dev/vda\". The hint must match the actual value exactly.",
              "type": "string"
            },
            "hctl": {
              "description": "A SCSI bus address like 0:0:0:0. The hint must match the actual value exactly.",
              "type": "string"
            },
            "minSizeGigabytes": {
              "description": "The minimum size of the device in Gigabytes.",
              "type": "integer",
              "minimum": 0
            },
            "model": {
              "description": "A vendor-specific device identifier. The hint can be a substring of the actual value.",
              "type": "string"
            },
            "rotational": {
              "description": "True if the device should use spinning media, false otherwise.",
              "type": "boolean"
            },
            "serialNumber": {
              "description": "Device serial number. The hint must match the actual value exactly.",
              "type": "string"
            },
            "vendor": {
              "description": "The name of the vendor or manufacturer of the device. The hint can be a substring of the actual value.",
              "type": "string"
            },
            "wwn": {
              "description": "Unique storage identifier. The hint must match the actual value exactly.",
              "type": "string"
            },
            "wwnVendorExtension": {
              "description": "Unique vendor storage identifier. The hint must match the actual value exactly.",
              "type": "string"
            },
            "wwnWithExtension": {
              "description": "Unique storage identifier with the vendor extension appended. The hint must match the actual value exactly.",
              "type": "string"
            }
          }
        },
        "taints": {
          "description": "Taints is the full, authoritative list of taints to apply to the corresponding Machine. This list will overwrite any modifications made to the Machine on an ongoing basis.",
          "type": "array",
          "items": {
            "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
            "type": "object",
            "required": [
              "effect",
              "key"
            ],
            "properties": {
              "effect": {
                "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                "type": "string"
              },
              "key": {
                "description": "Required. The taint key to be applied to a node.",
                "type": "string"
              },
              "timeAdded": {
                "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
                "type": "string",
                "format": "date-time"
              },
              "value": {
                "description": "The taint value corresponding to the taint key.",
                "type": "string"
              }
            }
          }
        },
        "userData": {
          "description": "UserData holds the reference to the Secret containing the user data to be passed to the host before it boots.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          }
        }
      }
    },
    "status": {
      "description": "BareMetalHostStatus defines the observed state of BareMetalHost",
      "type": "object",
      "required": [
        "errorCount",
        "errorMessage",
        "hardwareProfile",
        "operationalStatus",
        "poweredOn",
        "provisioning"
      ],
      "properties": {
        "errorCount": {
          "description": "ErrorCount records how many times the host has encoutered an error since the last successful operation",
          "type": "integer"
        },
        "errorMessage": {
          "description": "the last error message reported by the provisioning subsystem",
          "type": "string"
        },
        "errorType": {
          "description": "ErrorType indicates the type of failure encountered when the OperationalStatus is OperationalStatusError",
          "type": "string",
          "enum": [
            "provisioned registration error",
            "registration error",
            "inspection error",
            "preparation error",
            "provisioning error",
            "power management error"
          ]
        },
        "goodCredentials": {
          "description": "the last credentials we were able to validate as working",
          "type": "object",
          "properties": {
            "credentials": {
              "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name is unique within a namespace to reference a secret resource.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace defines the space within which the secret name must be unique.",
                  "type": "string"
                }
              }
            },
            "credentialsVersion": {
              "type": "string"
            }
          }
        },
        "hardware": {
          "description": "The hardware discovered to exist on the host.",
          "type": "object",
          "properties": {
            "cpu": {
              "description": "CPU describes one processor on the host.",
              "type": "object",
              "properties": {
                "arch": {
                  "type": "string"
                },
                "clockMegahertz": {
                  "description": "ClockSpeed is a clock speed in MHz",
                  "type": "number",
                  "format": "double"
                },
                "count": {
                  "type": "integer"
                },
                "flags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "model": {
                  "type": "string"
                }
              }
            },
            "firmware": {
              "description": "Firmware describes the firmware on the host.",
              "type": "object",
              "properties": {
                "bios": {
                  "description": "The BIOS for this firmware",
                  "type": "object",
                  "properties": {
                    "date": {
                      "description": "The release/build date for this BIOS",
                      "type": "string"
                    },
                    "vendor": {
                      "description": "The vendor name for this BIOS",
                      "type": "string"
                    },
                    "version": {
                      "description": "The version of the BIOS",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "hostname": {
              "type": "string"
            },
            "nics": {
              "type": "array",
              "items": {
                "description": "NIC describes one network interface on the host.",
                "type": "object",
                "properties": {
                  "ip": {
                    "description": "The IP address of the interface. This will be an IPv4 or IPv6 address if one is present.  If both IPv4 and IPv6 addresses are present in a dual-stack environment, two nics will be output, one with each IP.",
                    "type": "string"
                  },
                  "mac": {
                    "description": "The device MAC address",
                    "type": "string",
                    "pattern": "[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}"
                  },
                  "model": {
                    "description": "The vendor and product IDs of the NIC, e.g. \"0x8086 0x1572\"",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the network interface, e.g. \"en0\"",
                    "type": "string"
                  },
                  "pxe": {
                    "description": "Whether the NIC is PXE Bootable",
                    "type": "boolean"
                  },
                  "speedGbps": {
                    "description": "The speed of the device in Gigabits per second",
                    "type": "integer"
                  },
                  "vlanId": {
                    "description": "The untagged VLAN ID",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 4094,
                    "minimum": 0
                  },
                  "vlans": {
                    "description": "The VLANs available",
                    "type": "array",
                    "items": {
                      "description": "VLAN represents the name and ID of a VLAN",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "VLANID is a 12-bit 802.1Q VLAN identifier",
                          "type": "integer",
                          "format": "int32",
                          "maximum": 4094,
                          "minimum": 0
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "ramMebibytes": {
              "type": "integer"
            },
            "storage": {
              "type": "array",
              "items": {
                "description": "Storage describes one storage device (disk, SSD, etc.) on the host.",
                "type": "object",
                "properties": {
                  "hctl": {
                    "description": "The SCSI location of the device",
                    "type": "string"
                  },
                  "model": {
                    "description": "Hardware model",
                    "type": "string"
                  },
                  "name": {
                    "description": "The Linux device name of the disk, e.g. \"/dev/sda\". Note that this may not be stable across reboots.",
                    "type": "string"
                  },
                  "rotational": {
                    "description": "Whether this disk represents rotational storage. This field is not recommended for usage, please prefer using 'Type' field instead, this field will be deprecated eventually.",
                    "type": "boolean"
                  },
                  "serialNumber": {
                    "description": "The serial number of the device",
                    "type": "string"
                  },
                  "sizeBytes": {
                    "description": "The size of the disk in Bytes",
                    "type": "integer",
                    "format": "int64"
                  },
                  "type": {
                    "description": "Device type, one of: HDD, SSD, NVME.",
                    "type": "string",
                    "enum": [
                      "HDD",
                      "SSD",
                      "NVME"
                    ]
                  },
                  "vendor": {
                    "description": "The name of the vendor of the device",
                    "type": "string"
                  },
                  "wwn": {
                    "description": "The WWN of the device",
                    "type": "string"
                  },
                  "wwnVendorExtension": {
                    "description": "The WWN Vendor extension of the device",
                    "type": "string"
                  },
                  "wwnWithExtension": {
                    "description": "The WWN with the extension",
                    "type": "string"
                  }
                }
              }
            },
            "systemVendor": {
              "description": "HardwareSystemVendor stores details about the whole hardware system.",
              "type": "object",
              "properties": {
                "manufacturer": {
                  "type": "string"
                },
                "productName": {
                  "type": "string"
                },
                "serialNumber": {
                  "type": "string"
                }
              }
            }
          }
        },
        "hardwareProfile": {
          "description": "The name of the profile matching the hardware details.",
          "type": "string"
        },
        "lastUpdated": {
          "description": "LastUpdated identifies when this status was last observed.",
          "type": "string",
          "format": "date-time"
        },
        "operationHistory": {
          "description": "OperationHistory holds information about operations performed on this host.",
          "type": "object",
          "properties": {
            "deprovision": {
              "description": "OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.",
              "type": "object",
              "properties": {
                "end": {
                  "format": "date-time"
                },
                "start": {
                  "format": "date-time"
                }
              }
            },
            "inspect": {
              "description": "OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.",
              "type": "object",
              "properties": {
                "end": {
                  "format": "date-time"
                },
                "start": {
                  "format": "date-time"
                }
              }
            },
            "provision": {
              "description": "OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.",
              "type": "object",
              "properties": {
                "end": {
                  "format": "date-time"
                },
                "start": {
                  "format": "date-time"
                }
              }
            },
            "register": {
              "description": "OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.",
              "type": "object",
              "properties": {
                "end": {
                  "format": "date-time"
                },
                "start": {
                  "format": "date-time"
                }
              }
            }
          }
        },
        "operationalStatus": {
          "description": "OperationalStatus holds the status of the host",
          "type": "string",
          "enum": [
            "",
            "OK",
            "discovered",
            "error",
            "delayed",
            "detached"
          ]
        },
        "poweredOn": {
          "description": "indicator for whether or not the host is powered on",
          "type": "boolean"
        },
        "provisioning": {
          "description": "Information tracked by the provisioner.",
          "type": "object",
          "required": [
            "ID",
            "state"
          ],
          "properties": {
            "ID": {
              "description": "The machine's UUID from the underlying provisioning tool",
              "type": "string"
            },
            "bootMode": {
              "description": "BootMode indicates the boot mode used to provision the node",
              "type": "string",
              "enum": [
                "UEFI",
                "UEFISecureBoot",
                "legacy"
              ]
            },
            "customDeploy": {
              "description": "Custom deploy procedure applied to the host.",
              "type": "object",
              "required": [
                "method"
              ],
              "properties": {
                "method": {
                  "description": "Custom deploy method name. This name is specific to the deploy ramdisk used. If you don't have a custom deploy ramdisk, you shouldn't use CustomDeploy.",
                  "type": "string"
                }
              }
            },
            "firmware": {
              "description": "The Bios set by the user",
              "type": "object",
              "properties": {
                "simultaneousMultithreadingEnabled": {
                  "description": "Allows a single physical processor core to appear as several logical processors. This supports following options: true, false.",
                  "type": "boolean",
                  "enum": [
                    true,
                    false
                  ]
                },
                "sriovEnabled": {
                  "description": "SR-IOV support enables a hypervisor to create virtual instances of a PCI-express device, potentially increasing performance. This supports following options: true, false.",
                  "type": "boolean",
                  "enum": [
                    true,
                    false
                  ]
                },
                "virtualizationEnabled": {
                  "description": "Supports the virtualization of platform hardware. This supports following options: true, false.",
                  "type": "boolean",
                  "enum": [
                    true,
                    false
                  ]
                }
              }
            },
            "image": {
              "description": "Image holds the details of the last image successfully provisioned to the host.",
              "type": "object",
              "required": [
                "url"
              ],
              "properties": {
                "checksum": {
                  "description": "Checksum is the checksum for the image.",
                  "type": "string"
                },
                "checksumType": {
                  "description": "ChecksumType is the checksum algorithm for the image. e.g md5, sha256, sha512",
                  "type": "string",
                  "enum": [
                    "md5",
                    "sha256",
                    "sha512"
                  ]
                },
                "format": {
                  "description": "DiskFormat contains the format of the image (raw, qcow2, ...). Needs to be set to raw for raw images streaming. Note live-iso means an iso referenced by the url will be live-booted and not deployed to disk, and in this case the checksum options are not required and if specified will be ignored.",
                  "type": "string",
                  "enum": [
                    "raw",
                    "qcow2",
                    "vdi",
                    "vmdk",
                    "live-iso"
                  ]
                },
                "url": {
                  "description": "URL is a location of an image to deploy.",
                  "type": "string"
                }
              }
            },
            "raid": {
              "description": "The Raid set by the user",
              "type": "object",
              "properties": {
                "hardwareRAIDVolumes": {
                  "description": "The list of logical disks for hardware RAID, if rootDeviceHints isn't used, first volume is root volume. You can set the value of this field to `[]` to clear all the hardware RAID configurations."
                },
                "softwareRAIDVolumes": {
                  "description": "The list of logical disks for software RAID, if rootDeviceHints isn't used, first volume is root volume. If HardwareRAIDVolumes is set this item will be invalid. The number of created Software RAID devices must be 1 or 2. If there is only one Software RAID device, it has to be a RAID-1. If there are two, the first one has to be a RAID-1, while the RAID level for the second one can be 0, 1, or 1+0. As the first RAID device will be the deployment device, enforcing a RAID-1 reduces the risk of ending up with a non-booting node in case of a disk failure. Software RAID will always be deleted.",
                  "maxItems": 2
                }
              }
            },
            "rootDeviceHints": {
              "description": "The RootDevicehints set by the user",
              "type": "object",
              "properties": {
                "deviceName": {
                  "description": "A Linux device name like \"/dev/vda\". The hint must match the actual value exactly.",
                  "type": "string"
                },
                "hctl": {
                  "description": "A SCSI bus address like 0:0:0:0. The hint must match the actual value exactly.",
                  "type": "string"
                },
                "minSizeGigabytes": {
                  "description": "The minimum size of the device in Gigabytes.",
                  "type": "integer",
                  "minimum": 0
                },
                "model": {
                  "description": "A vendor-specific device identifier. The hint can be a substring of the actual value.",
                  "type": "string"
                },
                "rotational": {
                  "description": "True if the device should use spinning media, false otherwise.",
                  "type": "boolean"
                },
                "serialNumber": {
                  "description": "Device serial number. The hint must match the actual value exactly.",
                  "type": "string"
                },
                "vendor": {
                  "description": "The name of the vendor or manufacturer of the device. The hint can be a substring of the actual value.",
                  "type": "string"
                },
                "wwn": {
                  "description": "Unique storage identifier. The hint must match the actual value exactly.",
                  "type": "string"
                },
                "wwnVendorExtension": {
                  "description": "Unique vendor storage identifier. The hint must match the actual value exactly.",
                  "type": "string"
                },
                "wwnWithExtension": {
                  "description": "Unique storage identifier with the vendor extension appended. The hint must match the actual value exactly.",
                  "type": "string"
                }
              }
            },
            "state": {
              "description": "An indiciator for what the provisioner is doing with the host.",
              "type": "string"
            }
          }
        },
        "triedCredentials": {
          "description": "the last credentials we sent to the provisioning backend",
          "type": "object",
          "properties": {
            "credentials": {
              "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name is unique within a namespace to reference a secret resource.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace defines the space within which the secret name must be unique.",
                  "type": "string"
                }
              }
            },
            "credentialsVersion": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "metal3.io",
      "kind": "BareMetalHost",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}