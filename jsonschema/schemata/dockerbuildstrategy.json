{
  "description": "DockerBuildStrategy defines input parameters specific to container image build.",
  "type": "object",
  "properties": {
    "buildArgs": {
      "description": "buildArgs contains build arguments that will be resolved in the Dockerfile.  See https://docs.docker.com/engine/reference/builder/#/arg for more details. NOTE: Only the 'name' and 'value' fields are supported. Any settings on the 'valueFrom' field are ignored.",
      "type": "array",
      "items": {
        "description": "EnvVar represents an environment variable present in a Container.",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
            "type": "string"
          },
          "value": {
            "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
            "type": "string"
          },
          "valueFrom": {
            "description": "EnvVarSource represents a source for the value of an EnvVar.",
            "type": "object",
            "properties": {
              "configMapKeyRef": {
                "description": "Selects a key from a ConfigMap.",
                "type": "object",
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "The key to select.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "optional": {
                    "description": "Specify whether the ConfigMap or its key must be defined",
                    "type": "boolean"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "fieldRef": {
                "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                "type": "object",
                "required": [
                  "fieldPath"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                    "type": "string"
                  },
                  "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "resourceFieldRef": {
                "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                "type": "object",
                "required": [
                  "resource"
                ],
                "properties": {
                  "containerName": {
                    "description": "Container name: required for volumes, optional for env vars",
                    "type": "string"
                  },
                  "divisor": {
                    "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "secretKeyRef": {
                "description": "SecretKeySelector selects a key of a Secret.",
                "type": "object",
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "optional": {
                    "description": "Specify whether the Secret or its key must be defined",
                    "type": "boolean"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              }
            }
          }
        }
      }
    },
    "dockerfilePath": {
      "description": "dockerfilePath is the path of the Dockerfile that will be used to build the container image, relative to the root of the context (contextDir). Defaults to `Dockerfile` if unset.",
      "type": "string"
    },
    "env": {
      "description": "env contains additional environment variables you want to pass into a builder container.",
      "type": "array",
      "items": {
        "description": "EnvVar represents an environment variable present in a Container.",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
            "type": "string"
          },
          "value": {
            "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
            "type": "string"
          },
          "valueFrom": {
            "description": "EnvVarSource represents a source for the value of an EnvVar.",
            "type": "object",
            "properties": {
              "configMapKeyRef": {
                "description": "Selects a key from a ConfigMap.",
                "type": "object",
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "The key to select.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "optional": {
                    "description": "Specify whether the ConfigMap or its key must be defined",
                    "type": "boolean"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "fieldRef": {
                "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                "type": "object",
                "required": [
                  "fieldPath"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                    "type": "string"
                  },
                  "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "resourceFieldRef": {
                "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                "type": "object",
                "required": [
                  "resource"
                ],
                "properties": {
                  "containerName": {
                    "description": "Container name: required for volumes, optional for env vars",
                    "type": "string"
                  },
                  "divisor": {
                    "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "secretKeyRef": {
                "description": "SecretKeySelector selects a key of a Secret.",
                "type": "object",
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "optional": {
                    "description": "Specify whether the Secret or its key must be defined",
                    "type": "boolean"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              }
            }
          }
        }
      }
    },
    "forcePull": {
      "description": "forcePull describes if the builder should pull the images from registry prior to building.",
      "type": "boolean"
    },
    "from": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      },
      "x-kubernetes-map-type": "atomic"
    },
    "imageOptimizationPolicy": {
      "description": "imageOptimizationPolicy describes what optimizations the system can use when building images to reduce the final size or time spent building the image. The default policy is 'None' which means the final build image will be equivalent to an image created by the container image build API. The experimental policy 'SkipLayers' will avoid commiting new layers in between each image step, and will fail if the Dockerfile cannot provide compatibility with the 'None' policy. An additional experimental policy 'SkipLayersAndWarn' is the same as 'SkipLayers' but simply warns if compatibility cannot be preserved.",
      "type": "string"
    },
    "noCache": {
      "description": "noCache if set to true indicates that the container image build must be executed with the --no-cache=true flag",
      "type": "boolean"
    },
    "pullSecret": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "x-kubernetes-map-type": "atomic"
    },
    "volumes": {
      "description": "volumes is a list of input volumes that can be mounted into the builds runtime environment. Only a subset of Kubernetes Volume sources are supported by builds. More info: https://kubernetes.io/docs/concepts/storage/volumes",
      "type": "array",
      "items": {
        "description": "BuildVolume describes a volume that is made available to build pods, such that it can be mounted into buildah's runtime environment. Only a subset of Kubernetes Volume sources are supported.",
        "type": "object",
        "required": [
          "name",
          "source",
          "mounts"
        ],
        "properties": {
          "mounts": {
            "description": "mounts represents the location of the volume in the image build container",
            "type": "array",
            "items": {
              "description": "BuildVolumeMount describes the mounting of a Volume within buildah's runtime environment.",
              "type": "object",
              "required": [
                "destinationPath"
              ],
              "properties": {
                "destinationPath": {
                  "description": "destinationPath is the path within the buildah runtime environment at which the volume should be mounted. The transient mount within the build image and the backing volume will both be mounted read only. Must be an absolute path, must not contain '..' or ':', and must not collide with a destination path generated by the builder process Paths that collide with those added by the build controller will result in a failed build with an error message detailing which path caused the error.",
                  "type": "string"
                }
              }
            },
            "x-kubernetes-list-map-keys": [
              "destinationPath"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "destinationPath",
            "x-kubernetes-patch-strategy": "merge"
          },
          "name": {
            "description": "name is a unique identifier for this BuildVolume. It must conform to the Kubernetes DNS label standard and be unique within the pod. Names that collide with those added by the build controller will result in a failed build with an error message detailing which name caused the error. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
            "type": "string"
          },
          "source": {
            "description": "BuildVolumeSource represents the source of a volume to mount Only one of its supported types may be specified at any given time.",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "configMap": {
                "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
                "type": "object",
                "properties": {
                  "defaultMode": {
                    "description": "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "items": {
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "type": "array",
                    "items": {
                      "description": "Maps a string key to a path within a volume.",
                      "type": "object",
                      "required": [
                        "key",
                        "path"
                      ],
                      "properties": {
                        "key": {
                          "description": "The key to project.",
                          "type": "string"
                        },
                        "mode": {
                          "description": "Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "path": {
                          "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "optional": {
                    "description": "Specify whether the ConfigMap or its keys must be defined",
                    "type": "boolean"
                  }
                }
              },
              "csi": {
                "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
                "type": "object",
                "required": [
                  "driver"
                ],
                "properties": {
                  "driver": {
                    "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
                    "type": "string"
                  },
                  "fsType": {
                    "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
                    "type": "string"
                  },
                  "nodePublishSecretRef": {
                    "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "readOnly": {
                    "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
                    "type": "boolean"
                  },
                  "volumeAttributes": {
                    "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              },
              "secret": {
                "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
                "type": "object",
                "properties": {
                  "defaultMode": {
                    "description": "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "items": {
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "type": "array",
                    "items": {
                      "description": "Maps a string key to a path within a volume.",
                      "type": "object",
                      "required": [
                        "key",
                        "path"
                      ],
                      "properties": {
                        "key": {
                          "description": "The key to project.",
                          "type": "string"
                        },
                        "mode": {
                          "description": "Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "path": {
                          "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "optional": {
                    "description": "Specify whether the Secret or its keys must be defined",
                    "type": "boolean"
                  },
                  "secretName": {
                    "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                    "type": "string"
                  }
                }
              },
              "type": {
                "description": "type is the BuildVolumeSourceType for the volume source. Type must match the populated volume source. Valid types are: Secret, ConfigMap",
                "type": "string"
              }
            }
          }
        }
      },
      "x-kubernetes-list-map-keys": [
        "name"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "name",
      "x-kubernetes-patch-strategy": "merge"
    }
  },
  "$schema": "http://json-schema.org/schema#"
}